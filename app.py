import streamlit as st
import pandas as pd
import numpy as np
import re
import requests
import unicodedata
from io import BytesIO

# T·∫£i d·ªØ li·ªáu m·∫∑c ƒë·ªãnh t·ª´ GitHub (file2, file3, file4)
@st.cache_data
def load_default_data():
    urls = {
        'file2': "https://raw.githubusercontent.com/phamtai1211/Thau_3PPharma/main/file2.xlsx",
        'file3': "https://raw.githubusercontent.com/phamtai1211/Thau_3PPharma/main/file3.xlsx",
        'file4': "https://raw.githubusercontent.com/phamtai1211/Thau_3PPharma/main/nhom_dieu_tri.xlsx"
    }
    data = {}
    for k, url in urls.items():
        content = requests.get(url).content
        data[k] = pd.read_excel(BytesIO(content))
    return data['file2'], data['file3'], data['file4']

file2, file3, file4 = load_default_data()

# Chu·∫©n h√≥a text

def remove_diacritics(s: str) -> str:
    return ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn')

def normalize_text(s: str) -> str:
    s = str(s)
    s = remove_diacritics(s).lower()
    return re.sub(r'\s+', '', s)

# Chu·∫©n h√≥a ho·∫°t ch·∫•t, h√†m l∆∞·ª£ng, nh√≥m

def normalize_active(name: str) -> str:
    return re.sub(r'\s+', ' ', re.sub(r'\(.*?\)', '', str(name))).strip().lower()

def normalize_concentration(conc: str) -> str:
    s = str(conc).lower().replace(',', '.')
    parts = [p.strip() for p in re.split(r'[;,]', s) if p.strip()]
    parts = [p for p in parts if re.search(r'\d', p)]
    if len(parts) >= 2 and re.search(r'(mg|mcg|g|%)', parts[0]) and 'ml' in parts[-1]:
        return parts[0].replace(' ', '') + '/' + parts[-1].replace(' ', '')
    return ''.join([p.replace(' ', '') for p in parts])

def normalize_group(grp: str) -> str:
    return re.sub(r'\D', '', str(grp)).strip()

# Sidebar
st.sidebar.title("Ch·ª©c nƒÉng")
option = st.sidebar.radio("Ch·ªçn ch·ª©c nƒÉng", [
    "L·ªçc Danh M·ª•c Th·∫ßu", "Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu", "Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu", "ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai"
])

# 1. L·ªçc Danh M·ª•c Th·∫ßu
if option == "L·ªçc Danh M·ª•c Th·∫ßu":
    st.header("üìÇ L·ªçc Danh M·ª•c Th·∫ßu")
    # ch·ªçn khu v·ª±c
    regions = sorted(file3['Mi·ªÅn'].dropna().unique())
    sel_region = st.selectbox("Ch·ªçn Mi·ªÅn", ['(T·∫•t c·∫£)'] + regions)
    df3_temp = file3.copy()
    if sel_region != '(T·∫•t c·∫£)': df3_temp = df3_temp[df3_temp['Mi·ªÅn'] == sel_region]
    for col in ['V√πng','T·ªânh','B·ªánh vi·ªán/SYT']:
        vals = sorted(df3_temp[col].dropna().unique())
        sel = st.selectbox(f"Ch·ªçn {col}", ['(T·∫•t c·∫£)'] + vals)
        if sel != '(T·∫•t c·∫£)': df3_temp = df3_temp[df3_temp[col] == sel]
    st.session_state['file3_temp'] = df3_temp.copy()

    uploaded = st.file_uploader("T·∫£i l√™n file Danh M·ª•c M·ªùi Th·∫ßu (.xlsx)", type=['xlsx'])
    if uploaded:
        # ƒë·ªçc sheet c√≥ nhi·ªÅu c·ªôt nh·∫•t
        xls = pd.ExcelFile(uploaded)
        sheet = max(xls.sheet_names, key=lambda s: pd.read_excel(uploaded, sheet_name=s, nrows=5, header=None).shape[1])
        raw = pd.read_excel(uploaded, sheet_name=sheet, header=None)
        # t√¨m header row
        header_idx = None
        scores = []
        for i in range(min(10, raw.shape[0])):
            row = raw.iloc[i].fillna('').astype(str).tolist()
            text = normalize_text(' '.join(row))
            score = sum([1 for kw in ['tenhoatchat','soluong','nhomthuoc','nongdo'] if kw in text])
            scores.append((i, score))
            if 'tenhoatchat' in text and 'soluong' in text:
                header_idx = i
                break
        if header_idx is None:
            idx, sc = max(scores, key=lambda x: x[1])
            if sc > 0:
                header_idx = idx
                st.warning(f"T·ª± ƒë·ªông ch·ªçn d√≤ng ti√™u ƒë·ªÅ t·∫°i d√≤ng {idx+1}")
            else:
                st.error("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c header.")
        if header_idx is not None:
            df_body = raw.iloc[header_idx+1:].reset_index()
            df_body.columns = raw.iloc[header_idx]
            df_body = df_body.dropna(how='all').reset_index(drop=True)
            # chu·∫©n h√≥a c·ªôt
            col_map = {}
            for c in df_body.columns:
                n = normalize_text(c)
                if 'tenhoatchat' in n: col_map[c] = 'T√™n ho·∫°t ch·∫•t'
                elif 'tenthanhphan' in n: col_map[c] = 'T√™n ho·∫°t ch·∫•t'
                elif 'nongdo' in n or 'hamluong' in n: col_map[c] = 'N·ªìng ƒë·ªô/h√†m l∆∞·ª£ng'
                elif 'nhom' in n and 'thuoc' in n: col_map[c] = 'Nh√≥m thu·ªëc'
                elif 'soluong' in n: col_map[c] = 'S·ªë l∆∞·ª£ng'
                elif 'duongdung' in n or 'duong' in n: col_map[c] = 'ƒê∆∞·ªùng d√πng'
                elif 'gia' in n: col_map[c] = 'Gi√° k·∫ø ho·∫°ch'
            df_body.rename(columns=col_map, inplace=True)

            # ƒë√°nh d·∫•u index g·ªëc ƒë·ªÉ lo·∫°i tr√πng
            df_body['_orig_idx'] = df_body['index']
            # chu·∫©n h√≥a ƒë·ªÉ merge
            df_body['active_norm'] = df_body['T√™n ho·∫°t ch·∫•t'].apply(normalize_active)
            df_body['conc_norm'] = df_body['N·ªìng ƒë·ªô/h√†m l∆∞·ª£ng'].apply(normalize_concentration)
            df_body['group_norm'] = df_body['Nh√≥m thu·ªëc'].apply(normalize_group)
            df2 = file2.copy()
            df2['active_norm'] = df2['T√™n ho·∫°t ch·∫•t'].apply(normalize_active)
            df2['conc_norm'] = df2['T√™n h√†m l∆∞·ª£ng'].apply(normalize_concentration)
            df2['group_norm'] = df2['Nh√≥m thu·ªëc'].apply(normalize_group)
            # merge ch√≠nh
            merged = pd.merge(df_body, df2, on=['active_norm','conc_norm','group_norm'], how='left', indicator=True)
            # lo·∫°i tr√πng gi·ªØ 1 d√≤ng
            merged = merged.drop_duplicates(subset=['_orig_idx'], keep='first')
            # merge file3 temp ƒë·ªÉ b·ªï sung ƒê·ªãa b√†n, Kh√°ch h√†ng
            hosp = file3[file3['B·ªánh vi·ªán/SYT']==df3_temp['B·ªánh vi·ªán/SYT'].iloc[0]][['T√™n s·∫£n ph·∫©m','ƒê·ªãa b√†n','T√™n Kh√°ch h√†ng ph·ª• tr√°ch tri·ªÉn khai']]
            merged = pd.merge(merged, hosp, on='T√™n s·∫£n ph·∫©m', how='left')

            # chu·∫©n b·ªã xu·∫•t v√† hi·ªÉn th·ªã
            export_df = merged.drop(columns=['active_norm','conc_norm','group_norm','_merge','index','_orig_idx'])
            display_df = merged[merged['_merge']=='both'].drop(columns=['active_norm','conc_norm','group_norm','_merge','index','_orig_idx'])
            st.success(f"‚úÖ T·ªïng d√≤ng kh·ªõp: {len(display_df)}")
            st.dataframe(display_df)
            st.session_state['filtered_export'] = export_df.copy()
            st.session_state['filtered_display'] = display_df.copy()

            # tra c·ª©u
            kw = st.text_input("üîç Tra c·ª©u ho·∫°t ch·∫•t:")
            if kw:
                df_search = display_df[display_df['T√™n ho·∫°t ch·∫•t'].str.contains(kw, case=False, na=False)]
                st.dataframe(df_search)
            # download
            buf = BytesIO()
            with pd.ExcelWriter(buf, engine='xlsxwriter') as w:
                export_df.to_excel(w, index=False, sheet_name='KetQuaLoc')
            st.download_button('‚¨áÔ∏è T·∫£i File', data=buf.getvalue(), file_name='Ketqua_loc_all.xlsx')

# 2. Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu
elif option == "Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu":
    st.header("üìä Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu (S·ªë li·ªáu)")
    if 'filtered_display' not in st.session_state:
        st.info("Vui l√≤ng th·ª±c hi·ªán 'L·ªçc Danh M·ª•c Th·∫ßu' tr∆∞·ªõc.")
    else:
        df = st.session_state['filtered_display'].copy()
        df['S·ªë l∆∞·ª£ng'] = pd.to_numeric(df['S·ªë l∆∞·ª£ng'], errors='coerce').fillna(0)
        df['Gi√° k·∫ø ho·∫°ch'] = pd.to_numeric(df.get('Gi√° k·∫ø ho·∫°ch',0), errors='coerce').fillna(0)
        df['Tr·ªã gi√°'] = df['S·ªë l∆∞·ª£ng'] * df['Gi√° k·∫ø ho·∫°ch']
        # ƒë·ªãnh d·∫°ng
        def fmt(x):
            if x>=1e9: return f"{x/1e9:.2f} t·ª∑"
            if x>=1e6: return f"{x/1e6:.2f} tri·ªáu"
            if x>=1e3: return f"{x/1e3:.2f} ngh√¨n"
            return str(int(x))

        # ch·ªçn nh√≥m ƒëi·ªÅu tr·ªã
        groups = file4['Nh√≥m ƒëi·ªÅu tr·ªã'].dropna().unique()
        sel_group = st.selectbox("Ch·ªçn Nh√≥m ƒëi·ªÅu tr·ªã", ['(T·∫•t c·∫£)'] + list(groups))
        if sel_group != '(T·∫•t c·∫£)':
            acts = file4[file4['Nh√≥m ƒëi·ªÅu tr·ªã']==sel_group]['T√™n ho·∫°t ch·∫•t'].unique()
            df = df[df['T√™n ho·∫°t ch·∫•t'].isin(acts)]

        # t·ªïng Tr·ªã gi√° & S·ªë l∆∞·ª£ng theo ho·∫°t ch·∫•t
        val_act = df.groupby('T√™n ho·∫°t ch·∫•t')['Tr·ªã gi√°'].sum().reset_index().sort_values('Tr·ªã gi√°', ascending=False)
        val_act['Tr·ªã gi√°'] = val_act['Tr·ªã gi√°'].apply(fmt)
        qty_act = df.groupby('T√™n ho·∫°t ch·∫•t')['S·ªë l∆∞·ª£ng'].sum().reset_index().sort_values('S·ªë l∆∞·ª£ng', ascending=False)
        qty_act['S·ªë l∆∞·ª£ng'] = qty_act['S·ªë l∆∞·ª£ng'].apply(fmt)
        st.subheader('T·ªïng Tr·ªã gi√° theo Ho·∫°t ch·∫•t')
        st.table(val_act)
        st.subheader('T·ªïng S·ªë l∆∞·ª£ng theo Ho·∫°t ch·∫•t')
        st.table(qty_act)

        # Top 10 theo ƒê∆∞·ªùng d√πng & nh√≥m ƒëi·ªÅu tr·ªã
        st.subheader('Top 10 Ho·∫°t ch·∫•t theo ƒê∆∞·ªùng d√πng & Nh√≥m ƒëi·ªÅu tr·ªã (S·ªë l∆∞·ª£ng)')
        for route in ['ti√™m','u·ªëng']:
            sub = df[df['ƒê∆∞·ªùng d√πng'].str.contains(route, case=False, na=False)]
            top = sub.groupby('T√™n ho·∫°t ch·∫•t')['S·ªë l∆∞·ª£ng'].sum().nlargest(10).reset_index()
            top['S·ªë l∆∞·ª£ng'] = top['S·ªë l∆∞·ª£ng'].apply(fmt)
            st.markdown(f"**{route.capitalize()} - Top 10 theo S·ªë l∆∞·ª£ng**")
            st.table(top)

        # Ph√¢n t√≠ch theo Kh√°ch h√†ng
        cust = df.groupby('T√™n Kh√°ch h√†ng ph·ª• tr√°ch tri·ªÉn khai').agg(
            S·ªë_l∆∞·ª£ng=('S·ªë l∆∞·ª£ng','sum'),
            Tr·ªã_gi√°=('Tr·ªã gi√°','sum')
        ).reset_index()
        cust['T·ª∑ l·ªá SL'] = cust['S·ªë_l∆∞·ª£ng'] / cust['S·ªë_l∆∞·ª£ng'].sum()
        cust['T·ª∑ l·ªá SL'] = (cust['T·ª∑ l·ªá SL']*100).round(2).astype(str) + '%'
        cust['S·ªë_l∆∞·ª£ng'] = cust['S·ªë_l∆∞·ª£ng'].apply(fmt)
        cust['Tr·ªã_gi√°'] = cust['Tr·ªã_gi√°'].apply(fmt)
        st.subheader('Ph√¢n t√≠ch theo Kh√°ch h√†ng ph·ª• tr√°ch')
        st.table(cust)

# 3. Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu
elif option == "Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu":
    pass  # Gi·ªØ nguy√™n logic hi·ªán t·∫°i

# 4. ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai
elif option == "ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai":
    st.header("üí° ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai")
    if 'filtered_export' not in st.session_state or 'file3_temp' not in st.session_state:
        st.info("Vui l√≤ng th·ª±c hi·ªán 'L·ªçc' tr∆∞·ªõc.")
    else:
        df_f = st.session_state['filtered_export'].copy()
        df3t = st.session_state['file3_temp'].copy()
        # lo·∫°i d√≤ng kh√¥ng tri·ªÉn khai
        df3t = df3t[~df3t['ƒê·ªãa b√†n'].str.contains('T·∫°m ng∆∞ng tri·ªÉn khai|ko c√≥ ƒë·ªãa b√†n', case=False, na=False)]
        # SL ƒë√£ tr√∫ng
        df_qty = df_f.groupby('T√™n s·∫£n ph·∫©m')['S·ªë l∆∞·ª£ng'].sum().rename('SL_tr√∫ng').reset_index()
        df_sug = pd.merge(df3t, df_qty, on='T√™n s·∫£n ph·∫©m', how='left').fillna({'SL_tr√∫ng':0})
        # l·∫•y nh√≥m ƒëi·ªÅu tr·ªã
        df_sug = pd.merge(df_sug, file4[['T√™n ho·∫°t ch·∫•t','Nh√≥m ƒëi·ªÅu tr·ªã']], on='T√™n ho·∫°t ch·∫•t', how='left')
        # ƒë·ªÅ xu·∫•t SL: tƒÉng 50% ƒë·ªÉ ƒë·∫°t >50%
        df_sug['S·ªë l∆∞·ª£ng ƒë·ªÅ xu·∫•t'] = (df_sug['SL_tr√∫ng'] * 1.5).apply(np.ceil).astype(int)
        # l√Ω do k·∫øt h·ª£p nh√≥m ƒëi·ªÅu tr·ªã
        df_sug['L√Ω do'] = df_sug.apply(
            lambda r: f"Nh√≥m {r['Nh√≥m ƒëi·ªÅu tr·ªã']} th∆∞·ªùng s·ª≠ d·ª•ng c√°c ho·∫°t ch·∫•t t∆∞∆°ng ·ª©ng; s·∫£n ph·∫©m ch√∫ng ta th·∫ø h·ªá m·ªõi, hi·ªáu qu·∫£ t·ªët h∆°n.",
            axis=1
        )
        st.subheader('File 3 t·∫°m & ƒê·ªÅ xu·∫•t')
        st.dataframe(df_sug)
        # download
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine='xlsxwriter') as w:
            df_sug.to_excel(w, index=False, sheet_name='DeXuat')
        st.download_button('‚¨áÔ∏è T·∫£i File ƒê·ªÅ Xu·∫•t', data=buf.getvalue(), file_name='DeXuat_Thuoc.xlsx')
