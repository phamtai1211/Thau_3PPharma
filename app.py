import streamlit as st
import pandas as pd
import numpy as np
import re
import requests
from io import BytesIO
import plotly.express as px

# --- Utility functions ---
def find_header_row(df, keywords):
    for i in range(min(20, len(df))):
        row = " ".join(df.iloc[i].astype(str).tolist()).lower()
        if all(k in row for k in keywords): return i
    raise ValueError(f"Kh√¥ng t√¨m th·∫•y header trong 20 d√≤ng ƒë·∫ßu ch·ª©a: {keywords}")

def normalize_active(s):
    s = re.sub(r"\(.*?\)", "", str(s))
    s = re.sub(r"\s+", " ", s).strip().lower()
    return s

def normalize_conc(s):
    s = str(s).lower().replace(',', '.')
    s = re.sub(r'dung t√≠ch', '', s)
    parts = [p.strip() for p in s.split(',') if p.strip()]
    parts = [p for p in parts if re.search(r'\d', p)]
    if len(parts)>=2 and re.search(r'(mg|g|mcg|%)', parts[0]) and 'ml' in parts[-1]:
        return parts[0].replace(' ','') + '/' + parts[-1].replace(' ','')
    return ''.join(p.replace(' ','') for p in parts)

def normalize_group(s):
    return re.sub(r'\D','', str(s))

@st.cache_data
def load_defaults():
    urls = [
        "https://raw.githubusercontent.com/phamtai1211/Thau_3PPharma/main/file2.xlsx",
        "https://raw.githubusercontent.com/phamtai1211/Thau_3PPharma/main/file3.xlsx",
        "https://raw.githubusercontent.com/phamtai1211/Thau_3PPharma/main/nhom_dieu_tri.xlsx",
    ]
    file2 = pd.read_excel(BytesIO(requests.get(urls[0]).content))
    file3 = pd.read_excel(BytesIO(requests.get(urls[1]).content))
    file4 = pd.read_excel(BytesIO(requests.get(urls[2]).content))
    return file2, file3, file4

file2, file3, file4 = load_defaults()

# Temporary filtered file3 for proposals
def get_file3_temp():
    df = file3.copy()
    df['ƒê·ªãa b√†n'] = df['ƒê·ªãa b√†n'].fillna('').astype(str)
    return df[~df['ƒê·ªãa b√†n'].str.contains('t·∫°m ng∆∞ng tri·ªÉn khai|ko c√≥ ƒë·ªãa b√†n', case=False)]
file3_temp = get_file3_temp()

# Sidebar
st.sidebar.title("Ch·ª©c nƒÉng")
option = st.sidebar.radio("Ch·ªçn ch·ª©c nƒÉng", [
    "L·ªçc Danh M·ª•c Th·∫ßu",
    "Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu",
    "Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu",
    "ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai"
])

# 1. L·ªçc Danh M·ª•c Th·∫ßu
if option=="L·ªçc Danh M·ª•c Th·∫ßu":
    st.header("üìÇ L·ªçc Danh M·ª•c Th·∫ßu")
    # select filters on file3
    regi = st.selectbox("Ch·ªçn Mi·ªÅn", sorted(file3['Mi·ªÅn'].dropna().unique()))
    df3 = file3[file3['Mi·ªÅn']==regi]
    areas = sorted(df3['V√πng'].dropna().unique())
    area = st.selectbox("Ch·ªçn V√πng", ['(T·∫•t c·∫£)']+areas)
    if area!='(T·∫•t c·∫£)': df3=df3[df3['V√πng']==area]
    provs = sorted(df3['T·ªânh'].dropna().unique())
    prov = st.selectbox("Ch·ªçn T·ªânh", provs)
    df3=df3[df3['T·ªânh']==prov]
    hosp = st.selectbox("Ch·ªçn BV/SYT", sorted(df3['B·ªánh vi·ªán/SYT'].dropna().unique()))
    uploaded = st.file_uploader("File m·ªùi th·∫ßu (.xlsx)", type=['xlsx'])
    if uploaded:
        xls = pd.ExcelFile(uploaded)
        sheet = max(xls.sheet_names, key=lambda s: xls.parse(s,nrows=1,header=None).shape[1])
        raw = pd.read_excel(uploaded, sheet_name=sheet, header=None)
        try:
            hdr = find_header_row(raw, ['t√™n ho·∫°t ch·∫•t','s·ªë l∆∞·ª£ng'])
        except Exception as e:
            st.error(str(e))
            st.stop()
        df = raw.iloc[hdr+1:].copy().reset_index(drop=True)
        df.columns = raw.iloc[hdr].tolist()
        df = df.dropna(how='all').reset_index(drop=True)
        # detect columns
        act = next(c for c in df.columns if 'ho·∫°t ch·∫•t' in c.lower())
        conc = next(c for c in df.columns if 'h√†m l∆∞·ª£ng' in c.lower() or 'n·ªìng ƒë·ªô' in c.lower())
        grp = next(c for c in df.columns if 'nh√≥m' in c.lower())
        # normalize
        df['_act']=df[act].apply(normalize_active)
        df['_conc']=df[conc].apply(normalize_conc)
        df['_grp']=df[grp].apply(normalize_group)
        comp=file2.copy()
        comp['_act']=comp['T√™n ho·∫°t ch·∫•t'].apply(normalize_active)
        comp['_conc']=comp['N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng'].apply(normalize_conc)
        comp['_grp']=comp['Nh√≥m thu·ªëc'].apply(normalize_group)
        merged=pd.merge(df, comp, on=['_act','_conc','_grp'], how='left', suffixes=('','_cmp'))
        # attach hosp info
        hosp_data=file3[file3['B·ªánh vi·ªán/SYT']==hosp][['T√™n s·∫£n ph·∫©m','ƒê·ªãa b√†n','T√™n Kh√°ch h√†ng ph·ª• tr√°ch tri·ªÉn khai']]
        merged=pd.merge(merged, hosp_data, on='T√™n s·∫£n ph·∫©m', how='left')
        # drop duplicates
        out=merged.drop_duplicates(['_act','_conc','_grp'])
        # compute ratio
        tmap={normalize_active(a):g for a,g in zip(file4['Ho·∫°t ch·∫•t'], file4['Nh√≥m ƒëi·ªÅu tr·ªã'])}
        df['qty']=pd.to_numeric(df.get('S·ªë l∆∞·ª£ng',0),errors='coerce').fillna(0)
        totals=df.groupby(df['_act']).qty.sum()
        out['SL']=pd.to_numeric(out.get('S·ªë l∆∞·ª£ng',0),errors='coerce').fillna(0)
        out['T·ª∑ tr·ªçng nh√≥m th·∫ßu']=out['_act'].map(lambda a: totals.get(a,0))
        out['T·ª∑ tr·ªçng nh√≥m th·∫ßu']= (out['SL']/out['T·ª∑ tr·ªçng nh√≥m th·∫ßu']).fillna(0).map(lambda x:f"{x:.2%}")
        st.success(f"‚úÖ ƒê√£ l·ªçc xong {len(out)} d√≤ng.")
        st.dataframe(out)
        buf=BytesIO(); out.to_excel(buf,index=False)
        st.download_button("‚¨áÔ∏è Download k·∫øt qu·∫£", data=buf.getvalue(), file_name='ketqua_loc.xlsx')
        st.session_state['filtered']=out; st.session_state['hosp']=hosp

# 2. Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu
elif option=="Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu":
    st.header("üìä Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu")
    if 'filtered' not in st.session_state:
        st.info("L√†m b∆∞·ªõc L·ªçc Danh M·ª•c Th·∫ßu tr∆∞·ªõc.")
    else:
        df=st.session_state['filtered'].copy()
        df['S·ªë l∆∞·ª£ng']=pd.to_numeric(df['S·ªë l∆∞·ª£ng'],errors='coerce').fillna(0)
        df['Gi√° k·∫ø ho·∫°ch']=pd.to_numeric(df.get('Gi√° k·∫ø ho·∫°ch',0),errors='coerce').fillna(0)
        df['Tr·ªã gi√°']=df['S·ªë l∆∞·ª£ng']*df['Gi√° k·∫ø ho·∫°ch']
        # four charts: Top10 injection/value & ingestion/value
        df['route']=df['ƒê∆∞·ªùng d√πng'].str.lower().apply(lambda x:'Ti√™m' if 'ti√™m' in x else ('U·ªëng' if 'u·ªëng' in x else 'Kh√°c'))
        cols={'Ti√™m':'Ti√™m','U·ªëng':'U·ªëng'}
        for rt in ['Ti√™m','U·ªëng']:
            for metric in ['S·ªë l∆∞·ª£ng','Tr·ªã gi√°']:
                sub=df[df['route']==rt]
                top=sub.groupby('T√™n ho·∫°t ch·∫•t')[metric].sum().nlargest(10).reset_index()
                fig=px.bar(top, x='T√™n ho·∫°t ch·∫•t', y=metric, title=f"Top10 {rt} theo {metric}")
                st.plotly_chart(fig, use_container_width=True)
        # group treatment
        tmap={normalize_active(a):g for a,g in zip(file4['Ho·∫°t ch·∫•t'], file4['Nh√≥m ƒëi·ªÅu tr·ªã'])}
        df['Nh√≥m ƒëi·ªÅu tr·ªã']=df['_act'].map(tmap).fillna('Kh√°c')
        # by value
        tv=df.groupby('Nh√≥m ƒëi·ªÅu tr·ªã')['Tr·ªã gi√°'].sum().reset_index().sort_values('Tr·ªã gi√°',ascending=False)
        st.plotly_chart(px.bar(tv, x='Nh√≥m ƒëi·ªÅu tr·ªã', y='Tr·ªã gi√°', title='Tr·ªã gi√° theo nh√≥m ƒëi·ªÅu tr·ªã'), use_container_width=True)
        # choose group for top10 active by value
        grp=st.selectbox("Ch·ªçn nh√≥m ƒëi·ªÅu tr·ªã", tv['Nh√≥m ƒëi·ªÅu tr·ªã'])
        sub=df[df['Nh√≥m ƒëi·ªÅu tr·ªã']==grp]
        topv=sub.groupby('T√™n ho·∫°t ch·∫•t')['Tr·ªã gi√°'].sum().nlargest(10).reset_index()
        st.plotly_chart(px.bar(topv, x='T√™n ho·∫°t ch·∫•t', y='Tr·ªã gi√°', title=f"Top10 HC trong nh√≥m {grp}"), use_container_width=True)
        # by quantity
        tq=df.groupby('Nh√≥m ƒëi·ªÅu tr·ªã')['S·ªë l∆∞·ª£ng'].sum().reset_index().sort_values('S·ªë l∆∞·ª£ng',ascending=False)
        st.plotly_chart(px.bar(tq, x='Nh√≥m ƒëi·ªÅu tr·ªã', y='S·ªë l∆∞·ª£ng', title='SL theo nh√≥m ƒëi·ªÅu tr·ªã'), use_container_width=True)

# 3. Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu
elif option=="Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu":
    st.header("üèÜ Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu")
    win=st.file_uploader("File k·∫øt qu·∫£ tr√∫ng (.xlsx)",type=['xlsx'])
    inv=st.file_uploader("File m·ªùi th·∫ßu ƒë·ªÉ ƒë·ªëi chi·∫øu (t√πy ch·ªçn)",type=['xlsx'])
    if win:
        xls=pd.ExcelFile(win)
        sheet=max(xls.sheet_names, key=lambda s:xls.parse(s,nrows=1,header=None).shape[1])
        raw=pd.read_excel(win, sheet_name=sheet, header=None)
        try:
            h=find_header_row(raw,['t√™n ho·∫°t ch·∫•t','nh√† th·∫ßu tr√∫ng'])
        except:
            st.error("Kh√¥ng x√°c ƒë·ªãnh header tr√∫ng th·∫ßu."); st.stop()
        dfw=raw.iloc[h+1:].reset_index(drop=True)
        dfw.columns=raw.iloc[h].tolist(); dfw=dfw.dropna(how='all')
        dfw['S·ªë l∆∞·ª£ng']=pd.to_numeric(dfw.get('S·ªë l∆∞·ª£ng',0),errors='coerce').fillna(0)
        price_col=next((c for c in dfw.columns if 'Gi√° tr√∫ng' in str(c)), 'Gi√° k·∫ø ho·∫°ch')
        dfw[price_col]=pd.to_numeric(dfw.get(price_col,0),errors='coerce').fillna(0)
        dfw['Tr·ªã gi√°']=dfw['S·ªë l∆∞·ª£ng']*dfw[price_col]
        top= dfw.groupby('Nh√† th·∫ßu tr√∫ng')['Tr·ªã gi√°'].sum().nlargest(20).reset_index()
        st.plotly_chart(px.bar(top, x='Nh√† th·∫ßu tr√∫ng', y='Tr·ªã gi√°', orientation='h', title='Top20 nh√† th·∫ßu'), use_container_width=True)
        # treatment pie
        tmap={normalize_active(a):g for a,g in zip(file4['Ho·∫°t ch·∫•t'], file4['Nh√≥m ƒëi·ªÅu tr·ªã'])}
        dfw['_act']=dfw['T√™n ho·∫°t ch·∫•t'].apply(normalize_active)
        dfw['Nh√≥m ƒëi·ªÅu tr·ªã']=dfw['_act'].map(tmap).fillna('Kh√°c')
        tw=dfw.groupby('Nh√≥m ƒëi·ªÅu tr·ªã')['Tr·ªã gi√°'].sum().reset_index()
        st.plotly_chart(px.pie(tw, names='Nh√≥m ƒëi·ªÅu tr·ªã', values='Tr·ªã gi√°', title='C∆° c·∫•u tr·ªã gi√° tr√∫ng'), use_container_width=True)

# 4. ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai
elif option=="ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai":
    st.header("üí° ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai")
    if 'filtered' not in st.session_state:
        st.info("H√£y ch·∫°y L·ªçc Danh M·ª•c Th·∫ßu tr∆∞·ªõc.")
    else:
        df=st.session_state['filtered']
        hosp=st.session_state['hosp']
        # SL ƒë√£ l√†m: t·ª´ file3_temp
        df3=file3_temp[file3_temp['B·ªánh vi·ªán/SYT']==hosp]
        df3['_act']=df3['Ho·∫°t ch·∫•t'].apply(normalize_active)
        df3['_conc']=df3['H√†m l∆∞·ª£ng'].apply(normalize_conc)
        df3['_grp']=df3['Nh√≥m thu·ªëc'].apply(normalize_group)
        done=df3.groupby(['_act','_conc','_grp'])['SL th·ª±c t·∫ø'].sum()
        # SL th·∫ßu: t·ª´ df
        planned=df.set_index(['_act','_conc','_grp'])['S·ªë l∆∞·ª£ng']
        idx=planned.index.union(done.index)
        prop=pd.DataFrame(index=idx)
        prop['ƒê√£ l√†m']=done; prop['Th·∫ßu y√™u c·∫ßu']=planned
        prop=prop.fillna(0)
        prop['ƒê·ªÅ xu·∫•t nƒÉm sau']=(prop['Th·∫ßu y√™u c·∫ßu']-prop['ƒê√£ l√†m']).clip(lower=0).astype(int)
        prop=prop.reset_index()
        st.dataframe(prop)
        buf=BytesIO(); prop.to_excel(buf,index=False)
        st.download_button("‚¨áÔ∏è Download ƒë·ªÅ xu·∫•t", data=buf.getvalue(), file_name='de_xuat.xlsx')
