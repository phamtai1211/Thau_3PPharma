import streamlit as st
import pandas as pd
import re
import unicodedata
from io import BytesIO
import plotly.express as px

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n T√≠ch D·ªØ Li·ªáu Th·∫ßu Thu·ªëc", layout="wide")

# H√†m ti·ªán √≠ch
def remove_accents(s: str) -> str:
    """Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát (k·ªÉ c·∫£ ch·ªØ ƒë) kh·ªèi chu·ªói."""
    s = str(s)
    s = s.replace("ƒë", "d").replace("ƒê", "D")
    return ''.join(ch for ch in unicodedata.normalize('NFD', s) if unicodedata.category(ch) != 'Mn')

def normalize_text(s: str) -> str:
    """Chu·∫©n h√≥a chu·ªói ƒë·ªÉ so s√°nh: h·∫° ch·ªØ th∆∞·ªùng, b·ªè d·∫•u, x√≥a kho·∫£ng tr·∫Øng th·ª´a, b·ªè n·ªôi dung trong ngo·∫∑c, chu·∫©n h√≥a d·∫•u + v√† /."""
    if s is None:
        return ""
    s = remove_accents(s).lower()
    s = re.sub(r'\([^)]*\)', '', s)        # b·ªè n·ªôi dung trong ngo·∫∑c ƒë∆°n
    s = re.sub(r'\s+', ' ', s).strip()     # g·ªôp nhi·ªÅu kho·∫£ng tr·∫Øng th√†nh m·ªôt, b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi
    s = re.sub(r'\s*\+\s*', '+', s)        # b·ªè kho·∫£ng tr·∫Øng quanh d·∫•u +
    s = re.sub(r'\s*\/\s*', '/', s)        # b·ªè kho·∫£ng tr·∫Øng quanh d·∫•u /
    s = s.replace(" ", "")                # x√≥a m·ªçi kho·∫£ng tr·∫Øng c√≤n l·∫°i
    return s

def detect_header_row(file, sheet_name=0) -> int:
    """T√¨m ch·ªâ s·ªë d√≤ng ti√™u ƒë·ªÅ c·ªôt (trong 10 d√≤ng ƒë·∫ßu) d·ª±a tr√™n c√°c t·ª´ kh√≥a nh·∫≠n d·∫°ng c·ªôt."""
    try:
        sample_df = pd.read_excel(file, sheet_name=sheet_name, header=None, nrows=10)
    except Exception:
        return None
    # C√°c t·ª´ kh√≥a ƒë·ªÉ nh·∫≠n d·∫°ng d√≤ng ti√™u ƒë·ªÅ
    keywords = ["t√™n thu·ªëc", "ho·∫°t ch·∫•t", "h√†m l∆∞·ª£ng", "n·ªìng ƒë·ªô", "d·∫°ng b√†o ch·∫ø",
                "ƒë∆∞·ªùng d√πng", "s·ªë l∆∞·ª£ng", "ƒë∆°n v·ªã", "gi√° k·∫ø ho·∫°ch", "ƒë∆°n gi√° tr√∫ng th·∫ßu",
                "th√†nh ti·ªÅn", "nh√† th·∫ßu", "mi·ªÅn", "v√πng", "t·ªânh", "b·ªánh vi·ªán", "syt",
                "nh√≥m thu·ªëc", "t√™n s·∫£n ph·∫©m", "kh√°ch h√†ng"]
    keywords_norm = [remove_accents(k).lower() for k in keywords]
    header_idx = None
    for i in range(min(10, len(sample_df))):
        row_text = remove_accents(" ".join(sample_df.loc[i].fillna("").astype(str).tolist())).lower()
        count = 0
        for kw in keywords_norm:
            if kw in row_text:
                count += 1
        if count >= 3:  # d√≤ng c√≥ t·ª´ 3 t·ª´ kh√≥a tr·ªü l√™n
            header_idx = i
            break
    return header_idx

def load_excel(file):
    """ƒê·ªçc file Excel v√†o DataFrame, t·ª± ƒë·ªông ph√°t hi·ªán d√≤ng ti√™u ƒë·ªÅ."""
    header_idx = detect_header_row(file)
    try:
        df = pd.read_excel(file, header=header_idx)
    except Exception:
        # Th·ª≠ l·∫°i v·ªõi engine openpyxl n·∫øu c·∫ßn
        df = pd.read_excel(file, header=header_idx, engine='openpyxl')
    return df, header_idx

def identify_columns(df: pd.DataFrame):
    """X√°c ƒë·ªãnh c√°c c·ªôt quan tr·ªçng trong DataFrame d·ª±a v√†o t√™n (ƒë√£ b·ªè d·∫•u, lower)."""
    col_map = {
        "med_name": None,      # T√™n thu·ªëc ho·∫∑c T√™n s·∫£n ph·∫©m
        "active": None,        # Ho·∫°t ch·∫•t
        "strength": None,      # H√†m l∆∞·ª£ng/N·ªìng ƒë·ªô
        "dosage_form": None,   # D·∫°ng b√†o ch·∫ø
        "route": None,         # ƒê∆∞·ªùng d√πng
        "quantity": None,      # S·ªë l∆∞·ª£ng
        "unit": None,          # ƒê∆°n v·ªã t√≠nh
        "plan_price": None,    # Gi√° k·∫ø ho·∫°ch
        "award_price": None,   # ƒê∆°n gi√° tr√∫ng th·∫ßu
        "total_amount": None,  # Th√†nh ti·ªÅn
        "winner": None,        # Nh√† th·∫ßu tr√∫ng th·∫ßu
        "customer": None,      # Kh√°ch h√†ng ph·ª• tr√°ch
        "region": None,        # Mi·ªÅn
        "zone": None,          # V√πng
        "province": None,      # T·ªânh
        "hospital": None,      # B·ªánh vi·ªán/SYT
        "drug_group": None     # Nh√≥m thu·ªëc (n·∫øu c√≥)
    }
    for col in df.columns:
        col_norm = remove_accents(str(col)).lower()
        if "hoat chat" in col_norm or "thanh phan" in col_norm:
            col_map["active"] = col
        elif "ham luong" in col_norm or "nong do" in col_norm:
            col_map["strength"] = col
        elif "dang bao che" in col_norm:
            col_map["dosage_form"] = col
        elif "duong dung" in col_norm:
            col_map["route"] = col
        elif col_norm.startswith("ten thuoc") or "ten thuoc" in col_norm:
            if col_map["med_name"] is None:
                col_map["med_name"] = col
        elif "ten san pham" in col_norm:
            if col_map["med_name"] is None:
                col_map["med_name"] = col
        elif col_norm.startswith("so luong") or col_norm == "so luong":
            col_map["quantity"] = col
        elif "don vi" in col_norm and "tinh" in col_norm:
            col_map["unit"] = col
        elif "gia ke hoach" in col_norm or "gia moi thau" in col_norm or "gia du kien" in col_norm:
            col_map["plan_price"] = col
        elif "don gia trung thau" in col_norm or "gia trung thau" in col_norm:
            col_map["award_price"] = col
        elif "thanh tien" in col_norm:
            col_map["total_amount"] = col
        elif "nha thau" in col_norm and "trung thau" in col_norm:
            col_map["winner"] = col
        elif "khach hang" in col_norm and "phu trach" in col_norm:
            col_map["customer"] = col
        elif col_norm == "mien":
            col_map["region"] = col
        elif col_norm == "vung":
            col_map["zone"] = col
        elif col_norm == "tinh":
            col_map["province"] = col
        elif "benh vien" in col_norm or col_norm.startswith("so y te"):
            col_map["hospital"] = col
        elif "nhom thuoc" in col_norm:
            col_map["drug_group"] = col
    return col_map

def format_number(num):
    """ƒê·ªãnh d·∫°ng s·ªë li·ªáu (ti·ªÅn t·ªá ho·∫∑c s·ªë l∆∞·ª£ng) ƒë·ªÉ hi·ªÉn th·ªã."""
    try:
        value = float(num)
    except:
        # n·∫øu kh√¥ng ph·∫£i s·ªë th√¨ tr·∫£ v·ªÅ chu·ªói g·ªëc
        return str(num)
    if value >= 1e9:
        return f"{value/1e9:.2f} t·ª∑"
    elif value >= 1e6:
        return f"{value/1e6:.1f} tri·ªáu"
    elif value >= 1000:
        return f"{int(value):,}"
    else:
        return str(int(value) if value.is_integer() else round(value, 2))

# Giao di·ªán sidebar t·∫£i file
st.sidebar.header("üìÅ Ch·ªçn File D·ªØ Li·ªáu")
tender_file = st.sidebar.file_uploader("Danh m·ª•c m·ªùi th·∫ßu (Excel)", type=["xlsx", "xls", "csv"])
company_file = st.sidebar.file_uploader("Danh m·ª•c s·∫£n ph·∫©m c√¥ng ty (Excel/CSV)", type=["xlsx", "xls", "csv"])
assign_file = st.sidebar.file_uploader("File ph√¢n c√¥ng KH ph·ª• tr√°ch (t√πy ch·ªçn)", type=["xlsx", "xls", "csv"])
awarded_file = st.sidebar.file_uploader("Danh m·ª•c tr√∫ng th·∫ßu (Excel)", type=["xlsx", "xls", "csv"])

# T·∫°o c√°c tab
tab1, tab2, tab3 = st.tabs(["üîé L·ªçc Danh M·ª•c Th·∫ßu", "üìä Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu", "üèÜ Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu"])

# Tab 1: L·ªçc danh m·ª•c m·ªùi th·∫ßu
with tab1:
    st.subheader("üîé L·ªçc Danh M·ª•c Th·∫ßu")
    st.write("H√£y t·∫£i l√™n **danh m·ª•c m·ªùi th·∫ßu** v√† **danh m·ª•c s·∫£n ph·∫©m c√¥ng ty** ·ªü thanh b√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu l·ªçc.")
    if tender_file is not None and company_file is not None:
        # ƒê·ªçc d·ªØ li·ªáu
        df_tender, tender_header = load_excel(tender_file)
        df_company, comp_header = load_excel(company_file)
        tender_cols = identify_columns(df_tender)
        comp_cols = identify_columns(df_company)
        # Ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc
        if not tender_cols["active"] or not tender_cols["strength"]:
            st.error("Kh√¥ng t√¨m th·∫•y c·ªôt *ho·∫°t ch·∫•t* v√† *h√†m l∆∞·ª£ng* trong file m·ªùi th·∫ßu. Vui l√≤ng ki·ªÉm tra l·∫°i file.")
            st.stop()
        if not comp_cols["active"] or not comp_cols["strength"]:
            st.error("Kh√¥ng t√¨m th·∫•y c·ªôt *ho·∫°t ch·∫•t* v√† *h√†m l∆∞·ª£ng* trong file s·∫£n ph·∫©m c√¥ng ty. Vui l√≤ng ki·ªÉm tra l·∫°i file.")
            st.stop()
        # X√°c ƒë·ªãnh t√™n c·ªôt s·∫£n ph·∫©m trong danh m·ª•c c√¥ng ty (n·∫øu c√≥)
        comp_active_col = comp_cols["active"]
        comp_strength_col = comp_cols["strength"]
        comp_product_col = comp_cols["med_name"] if comp_cols["med_name"] else comp_active_col
        # T·∫°o t·ª´ ƒëi·ªÉn key -> t√™n s·∫£n ph·∫©m c√¥ng ty
        company_dict = {}
        for _, row in df_company.iterrows():
            active_str = str(row[comp_active_col]) if pd.notna(row[comp_active_col]) else ""
            strength_str = str(row[comp_strength_col]) if pd.notna(row[comp_strength_col]) else ""
            key = normalize_text(active_str + strength_str)
            if key and key not in company_dict:
                prod_name = str(row[comp_product_col]) if pd.notna(row[comp_product_col]) else (active_str + " " + strength_str)
                company_dict[key] = prod_name
        # L·ªçc c√°c m·ª•c th·∫ßu kh·ªõp v·ªõi danh m·ª•c c√¥ng ty
        output_df = df_tender.copy()
        match_col = "S·∫£n ph·∫©m_C√¥ng ty kh·ªõp"
        output_df[match_col] = ""
        for idx, row in df_tender.iterrows():
            active_str = str(row[tender_cols["active"]]) if pd.notna(row[tender_cols["active"]]) else ""
            strength_str = str(row[tender_cols["strength"]]) if pd.notna(row[tender_cols["strength"]]) else ""
            tender_key = normalize_text(active_str + strength_str)
            if tender_key in company_dict:
                output_df.at[idx, match_col] = company_dict[tender_key]
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ l·ªçc (c√°c d√≤ng c√≥ kh·ªõp)
        df_matched = output_df[output_df[match_col] != ""]
        count = df_matched.shape[0]
        st.write(f"**K·∫øt qu·∫£:** C√≥ {count} m·∫∑t h√†ng trong danh m·ª•c m·ªùi th·∫ßu kh·ªõp v·ªõi danh m·ª•c s·∫£n ph·∫©m c·ªßa c√¥ng ty.")
        st.dataframe(df_matched, height=400)
        # N√∫t t·∫£i file Excel k·∫øt qu·∫£
        try:
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                output_df.to_excel(writer, index=False, sheet_name="Ket_qua_loc")
            st.download_button(label="üíæ T·∫£i k·∫øt qu·∫£ l·ªçc (Excel)", 
                               data=output.getvalue(), 
                               file_name="Ketqua_loc_danhmucthau.xlsx", 
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        except Exception as e:
            st.error(f"Xu·∫•t Excel th·∫•t b·∫°i: {e}")
    else:
        st.info("üõà Vui l√≤ng t·∫£i **c·∫£ hai file** (danh m·ª•c m·ªùi th·∫ßu v√† danh m·ª•c s·∫£n ph·∫©m c√¥ng ty) ƒë·ªÉ th·ª±c hi·ªán l·ªçc.")

# Tab 2: Ph√¢n t√≠ch danh m·ª•c th·∫ßu
with tab2:
    st.subheader("üìä Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu")
    if tender_file is not None:
        # ƒê·∫£m b·∫£o ƒë√£ c√≥ df_tender
        if 'df_tender' not in locals():
            df_tender, tender_header = load_excel(tender_file)
        tender_cols = identify_columns(df_tender)
        # X√°c ƒë·ªãnh c√°c c·ªôt li√™n quan
        active_col = tender_cols["active"]
        strength_col = tender_cols["strength"]
        route_col = tender_cols["route"]
        quantity_col = tender_cols["quantity"]
        plan_price_col = tender_cols["plan_price"]
        total_col = tender_cols["total_amount"]
        # T√≠nh c·ªôt t·ªïng gi√° tr·ªã k·∫ø ho·∫°ch n·∫øu c·∫ßn
        df_analysis = df_tender.copy()
        if total_col and total_col in df_analysis.columns:
            df_analysis[total_col] = pd.to_numeric(df_analysis[total_col], errors='coerce')
        else:
            if plan_price_col and quantity_col:
                df_analysis[plan_price_col] = pd.to_numeric(df_analysis[plan_price_col], errors='coerce')
                df_analysis[quantity_col] = pd.to_numeric(df_analysis[quantity_col], errors='coerce')
                df_analysis["TongGiaKeHoach"] = df_analysis[plan_price_col] * df_analysis[quantity_col]
                total_col = "TongGiaKeHoach"
            else:
                total_col = None
        if quantity_col:
            df_analysis[quantity_col] = pd.to_numeric(df_analysis[quantity_col], errors='coerce')
        # Bi·ªÉu ƒë·ªì Top 10 ho·∫°t ch·∫•t theo ƒë∆∞·ªùng d√πng (ti√™m/u·ªëng)
        if active_col and route_col and total_col:
            # T√°ch d·ªØ li·ªáu theo ƒë∆∞·ªùng d√πng
            df_inj = df_analysis[df_analysis[route_col].astype(str).str.contains("ti√™m", case=False, na=False)]
            df_oral = df_analysis[df_analysis[route_col].astype(str).str.contains("u·ªëng", case=False, na=False)]
            # Nh√≥m theo ho·∫°t ch·∫•t (lowercase ƒë·ªÉ nh√≥m ch√≠nh x√°c)
            if not df_inj.empty:
                df_inj_group = df_inj.copy()
                df_inj_group['active_lower'] = df_inj_group[active_col].astype(str).str.lower()
                df_inj_group = df_inj_group.groupby('active_lower').agg({total_col: 'sum', quantity_col: 'sum', active_col: 'first'}).reset_index(drop=True)
                df_inj_top = df_inj_group.sort_values(total_col, ascending=False).head(10)
                # Nh√£n ho·∫°t ch·∫•t (vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu cho ƒë·∫πp)
                df_inj_top[active_col] = df_inj_top[active_col].str.title()
                # T·∫°o c·ªôt text hi·ªÉn th·ªã c·∫£ gi√° tr·ªã v√† s·ªë l∆∞·ª£ng
                df_inj_top["text"] = df_inj_top.apply(lambda r: f"{format_number(r[total_col])} ({format_number(r[quantity_col])})", axis=1)
                fig_inj = px.bar(df_inj_top, x=active_col, y=total_col, text="text", title="Top 10 ho·∫°t ch·∫•t (ƒë∆∞·ªùng ti√™m)")
                fig_inj.update_traces(textposition='outside')
                fig_inj.update_yaxes(title="T·ªïng gi√° tr·ªã k·∫ø ho·∫°ch (VND)")
                fig_inj.update_xaxes(title="Ho·∫°t ch·∫•t (ƒë∆∞·ªùng ti√™m)")
                st.plotly_chart(fig_inj, use_container_width=True)
            if not df_oral.empty:
                df_oral_group = df_oral.copy()
                df_oral_group['active_lower'] = df_oral_group[active_col].astype(str).str.lower()
                df_oral_group = df_oral_group.groupby('active_lower').agg({total_col: 'sum', quantity_col: 'sum', active_col: 'first'}).reset_index(drop=True)
                df_oral_top = df_oral_group.sort_values(total_col, ascending=False).head(10)
                df_oral_top[active_col] = df_oral_top[active_col].str.title()
                df_oral_top["text"] = df_oral_top.apply(lambda r: f"{format_number(r[total_col])} ({format_number(r[quantity_col])})", axis=1)
                fig_oral = px.bar(df_oral_top, x=active_col, y=total_col, text="text", title="Top 10 ho·∫°t ch·∫•t (ƒë∆∞·ªùng u·ªëng)")
                fig_oral.update_traces(textposition='outside')
                fig_oral.update_yaxes(title="T·ªïng gi√° tr·ªã k·∫ø ho·∫°ch (VND)")
                fig_oral.update_xaxes(title="Ho·∫°t ch·∫•t (ƒë∆∞·ªùng u·ªëng)")
                st.plotly_chart(fig_oral, use_container_width=True)
        else:
            st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ th·ªëng k√™ Top 10 ho·∫°t ch·∫•t (thi·∫øu c·ªôt ho·∫°t ch·∫•t, ƒë∆∞·ªùng d√πng ho·∫∑c gi√° tr·ªã).")
        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch theo kh√°ch h√†ng ph·ª• tr√°ch (n·∫øu c√≥ d·ªØ li·ªáu)
        if assign_file is not None or tender_cols["customer"]:
            if assign_file is not None:
                df_assign, assign_header = load_excel(assign_file)
            else:
                df_assign = df_analysis  # tr∆∞·ªùng h·ª£p c·ªôt KH ph·ª• tr√°ch n·∫±m ngay trong df_tender
            assign_cols = identify_columns(df_assign)
            customer_col = assign_cols["customer"]
            product_col = assign_cols["med_name"] or assign_cols["active"]
            if customer_col:
                # N·∫øu file ph√¢n c√¥ng c√≥ c·ªôt ƒë∆°n v·ªã (BV/SYT), c·ªë g·∫Øng l·ªçc theo ƒë∆°n v·ªã c·ªßa g√≥i th·∫ßu hi·ªán t·∫°i
                if assign_cols["hospital"] and tender_cols["hospital"]:
                    hosp_name = str(df_analysis[tender_cols["hospital"]].iloc[0]) if tender_cols["hospital"] else ""
                    if hosp_name:
                        df_assign = df_assign[df_assign[assign_cols["hospital"]].astype(str).str.contains(hosp_name, case=False, na=False)]
                # G·ªôp th√¥ng tin kh√°ch h√†ng ph·ª• tr√°ch v√†o danh m·ª•c th·∫ßu theo t√™n s·∫£n ph·∫©m
                df_merge = df_analysis.copy()
                if product_col in df_merge.columns and product_col in df_assign.columns:
                    # n·ªëi theo t√™n s·∫£n ph·∫©m/thu·ªëc
                    df_merge = df_merge.merge(df_assign[[product_col, customer_col]], on=product_col, how='left')
                elif tender_cols["active"] and assign_cols["active"] and assign_cols["strength"]:
                    # n·∫øu kh√¥ng c√≥ c·ªôt t√™n s·∫£n ph·∫©m chung, th·ª≠ n·ªëi theo ho·∫°t ch·∫•t+h√†m l∆∞·ª£ng (kh√¥ng ch·∫Øc nh∆∞ng th·ª≠)
                    df_assign["key"] = df_assign[assign_cols["active"]].astype(str).str.lower() + df_assign[assign_cols["strength"]].astype(str).str.lower()
                    df_merge["key"] = df_merge[tender_cols["active"]].astype(str).str.lower() + df_merge[tender_cols["strength"]].astype(str).str.lower()
                    df_merge = df_merge.merge(df_assign[["key", customer_col]], on="key", how="left")
                # Nh√≥m theo kh√°ch h√†ng v√† t√≠nh t·ªïng
                df_merge[total_col] = pd.to_numeric(df_merge[total_col], errors='coerce')
                if quantity_col:
                    df_merge[quantity_col] = pd.to_numeric(df_merge[quantity_col], errors='coerce')
                df_by_cust = df_merge.groupby(customer_col).agg({total_col: 'sum', quantity_col: 'sum'}).reset_index()
                df_by_cust = df_by_cust.dropna(subset=[customer_col])
                if df_by_cust.empty:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n c√¥ng ph√π h·ª£p ƒë·ªÉ ph√¢n t√≠ch theo kh√°ch h√†ng.")
                else:
                    df_by_cust = df_by_cust.sort_values(total_col, ascending=False)
                    df_by_cust["T·ªïng tr·ªã gi√° (VND)"] = df_by_cust[total_col]
                    df_by_cust["T·ªïng s·ªë l∆∞·ª£ng"] = df_by_cust[quantity_col]
                    df_cust_melt = df_by_cust.melt(id_vars=customer_col, value_vars=["T·ªïng tr·ªã gi√° (VND)", "T·ªïng s·ªë l∆∞·ª£ng"], 
                                                   var_name="Ch·ªâ ti√™u", value_name="Gi√° tr·ªã")
                    fig_cust = px.bar(df_cust_melt, x=customer_col, y="Gi√° tr·ªã", color="Ch·ªâ ti√™u", barmode="group",
                                      title="Ph√¢n t√≠ch theo kh√°ch h√†ng ph·ª• tr√°ch")
                    fig_cust.update_traces(text=df_cust_melt["Gi√° tr·ªã"].apply(format_number), textposition='outside')
                    fig_cust.update_xaxes(title="Kh√°ch h√†ng ph·ª• tr√°ch")
                    fig_cust.update_yaxes(title=None)
                    st.plotly_chart(fig_cust, use_container_width=True)
            else:
                st.warning("File ph√¢n c√¥ng kh√¥ng c√≥ th√¥ng tin kh√°ch h√†ng ph·ª• tr√°ch ph√π h·ª£p.")
        else:
            st.info("üõà C√≥ th·ªÉ t·∫£i file ph√¢n c√¥ng kh√°ch h√†ng (n·∫øu c√≥) ƒë·ªÉ xem th·ªëng k√™ theo ng∆∞·ªùi ph·ª• tr√°ch.")
        # Tra c·ª©u ho·∫°t ch·∫•t
        st.markdown("---")
        st.subheader("üîç Tra c·ª©u ho·∫°t ch·∫•t trong danh m·ª•c")
        query = st.text_input("Nh·∫≠p t√™n ho·∫°t ch·∫•t ho·∫∑c t·ª´ kh√≥a:")
        if query:
            if active_col:
                result_df = df_analysis[df_analysis[active_col].astype(str).str.lower().str.contains(query.strip().lower())]
                if result_df.empty:
                    st.write("Kh√¥ng t√¨m th·∫•y ho·∫°t ch·∫•t ph√π h·ª£p.")
                else:
                    cols_to_show = []
                    for col_key in ["active", "strength", "dosage_form", "route", "drug_group", "plan_price", "total_amount", "unit"]:
                        if tender_cols[col_key]:
                            cols_to_show.append(tender_cols[col_key])
                    cols_to_show = list(dict.fromkeys(cols_to_show))  # lo·∫°i b·ªè tr√πng l·∫∑p n·∫øu c√≥
                    st.dataframe(result_df[cols_to_show].reset_index(drop=True))
            else:
                st.warning("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c c·ªôt ho·∫°t ch·∫•t ƒë·ªÉ tra c·ª©u trong danh m·ª•c.")
    else:
        st.info("Vui l√≤ng t·∫£i file danh m·ª•c m·ªùi th·∫ßu ·ªü thanh b√™n ƒë·ªÉ xem ph√¢n t√≠ch.")

# Tab 3: Ph√¢n t√≠ch danh m·ª•c tr√∫ng th·∫ßu
with tab3:
    st.subheader("üèÜ Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu")
    if awarded_file is not None:
        df_award, award_header = load_excel(awarded_file)
        award_cols = identify_columns(df_award)
        active_col = award_cols["active"]
        if not active_col:
            st.error("Kh√¥ng t√¨m th·∫•y c·ªôt ho·∫°t ch·∫•t trong file tr√∫ng th·∫ßu (ti√™u ƒë·ªÅ c√≥ th·ªÉ kh√°c, vui l√≤ng ki·ªÉm tra).")
            st.stop()
        quantity_col = award_cols["quantity"]
        award_price_col = award_cols["award_price"]
        total_col = award_cols["total_amount"]
        # T√≠nh th√†nh ti·ªÅn n·∫øu ch∆∞a c√≥
        if total_col:
            df_award[total_col] = pd.to_numeric(df_award[total_col], errors='coerce')
        elif quantity_col and award_price_col:
            df_award[award_price_col] = pd.to_numeric(df_award[award_price_col], errors='coerce')
            df_award[quantity_col] = pd.to_numeric(df_award[quantity_col], errors='coerce')
            df_award["ThanhTien_TinhToan"] = df_award[award_price_col] * df_award[quantity_col]
            total_col = "ThanhTien_TinhToan"
        # B·ªô l·ªçc v√πng mi·ªÅn
        df_filtered = df_award.copy()
        region_col = award_cols["region"]; zone_col = award_cols["zone"]
        province_col = award_cols["province"]; hospital_col = award_cols["hospital"]
        if region_col:
            regions = ["T·∫•t c·∫£"] + sorted(df_award[region_col].dropna().unique().tolist())
            sel_region = st.selectbox("Ch·ªçn Mi·ªÅn:", regions)
            if sel_region and sel_region != "T·∫•t c·∫£":
                df_filtered = df_filtered[df_filtered[region_col] == sel_region]
        if zone_col:
            zones = ["T·∫•t c·∫£"] + sorted(df_filtered[zone_col].dropna().unique().tolist())
            sel_zone = st.selectbox("Ch·ªçn V√πng:", zones)
            if sel_zone and sel_zone != "T·∫•t c·∫£":
                df_filtered = df_filtered[df_filtered[zone_col] == sel_zone]
        if province_col:
            provinces = ["T·∫•t c·∫£"] + sorted(df_filtered[province_col].dropna().unique().tolist())
            sel_prov = st.selectbox("Ch·ªçn T·ªânh:", provinces)
            if sel_prov and sel_prov != "T·∫•t c·∫£":
                df_filtered = df_filtered[df_filtered[province_col] == sel_prov]
        if hospital_col:
            hospitals = ["T·∫•t c·∫£"] + sorted(df_filtered[hospital_col].dropna().unique().tolist())
            sel_hosp = st.selectbox("Ch·ªçn B·ªánh vi·ªán/SYT:", hospitals)
            if sel_hosp and sel_hosp != "T·∫•t c·∫£":
                df_filtered = df_filtered[df_filtered[hospital_col] == sel_hosp]
        st.write(f"**S·ªë m·∫∑t h√†ng:** {df_filtered.shape[0]}")
        st.dataframe(df_filtered.head(50))
        # Bi·ªÉu ƒë·ªì top 10 ho·∫°t ch·∫•t theo gi√° tr·ªã tr√∫ng th·∫ßu (trong ph·∫°m vi ƒë√£ l·ªçc)
        if total_col:
            df_group = df_filtered.copy()
            df_group['active_lower'] = df_group[active_col].astype(str).str.lower()
            df_group = df_group.groupby('active_lower').agg({total_col: 'sum', active_col: 'first'}).reset_index(drop=True)
            df_top10 = df_group.sort_values(total_col, ascending=False).head(10)
            df_top10[active_col] = df_top10[active_col].str.title()
            fig_top10 = px.bar(df_top10, x=active_col, y=total_col, 
                                text=df_top10[total_col].apply(format_number),
                                title="Top 10 ho·∫°t ch·∫•t tr√∫ng th·∫ßu (gi√° tr·ªã)")
            fig_top10.update_traces(textposition='outside')
            fig_top10.update_xaxes(title="Ho·∫°t ch·∫•t")
            fig_top10.update_yaxes(title="T·ªïng tr·ªã gi√° tr√∫ng th·∫ßu (VND)")
            st.plotly_chart(fig_top10, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu th√†nh ti·ªÅn ƒë·ªÉ th·ªëng k√™.")
    else:
        st.info("üõà Vui l√≤ng t·∫£i file danh m·ª•c tr√∫ng th·∫ßu ƒë·ªÉ xem ph√¢n t√≠ch.")
