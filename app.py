import streamlit as st
import pandas as pd
import io
import zipfile

# --- Helper functions ---
@st.cache_data
def read_excel_file(uploaded):
    """
    ƒê·ªçc file Excel, t·ª± ƒë·ªông ph√°t hi·ªán d√≤ng header n·∫±m trong 10 d√≤ng ƒë·∫ßu.
    """
    df0 = pd.read_excel(uploaded, header=None)
    header_row = 0
    for i in range(min(10, len(df0))):
        row = df0.iloc[i].astype(str)
        if any("B·ªánh vi·ªán" in c or "Danh M·ª•c" in c for c in row):
            header_row = i
            break
    return pd.read_excel(uploaded, header=header_row)


def process_uploaded(uploaded, df3_temp):
    """
    X·ª≠ l√Ω file Danh M·ª•c M·ªùi Th·∫ßu:
    - ƒê·ªçc file
    - L·ªçc c√°c d√≤ng t·ªìn t·∫°i trong df3_temp (d·ª±a tr√™n c·ªôt 'B·ªánh vi·ªán/SYT')
    """
    df = read_excel_file(uploaded)
    # Gi·∫£ s·ª≠ file Excel c√≥ c·ªôt 'B·ªánh vi·ªán/SYT'
    display_df = df[df['B·ªánh vi·ªán/SYT'].isin(df3_temp['B·ªánh vi·ªán/SYT'])]
    export_df = display_df.copy()
    return display_df, export_df


def to_excel_bytes(df_):
    """Chuy·ªÉn DataFrame th√†nh bytes ƒë·ªÉ download Excel"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df_.to_excel(writer, index=False)
    return output.getvalue()

# --- Load reference files ---
st.sidebar.header("üîß T·∫£i c√°c file tham kh·∫£o")
file3 = st.sidebar.file_uploader(
    "File 3: Danh s√°ch tri·ªÉn khai (Mi·ªÅn, V√πng, T·ªânh, BV/SYT...)",
    type=['xlsx'], key="file3"
)
file4 = st.sidebar.file_uploader(
    "File 4: Danh s√°ch Ho·∫°t ch·∫•t ‚Äì Nh√≥m ƒëi·ªÅu tr·ªã", type=['xlsx'], key="file4"
)

if not file3 or not file4:
    st.sidebar.warning("Vui l√≤ng upload ƒë·ªß c·∫£ File 3 v√† File 4 ·ªü tr√™n.")
    st.stop()

# ƒê·ªçc file tham kh·∫£o
df3_ref = pd.read_excel(file3)
df4_ref = pd.read_excel(file4)

# --- Main UI ---
st.title("üè• ·ª®ng d·ª•ng Ph√¢n t√≠ch ƒê·∫•u th·∫ßu Thu·ªëc")
menu = [
    "L·ªçc Danh M·ª•c Th·∫ßu",
    "Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu",
    "Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu"
]
option = st.sidebar.selectbox("Ch·ªçn ch·ª©c nƒÉng", menu)

# 1. L·ªçc Danh M·ª•c Th·∫ßu
if option == "L·ªçc Danh M·ª•c Th·∫ßu":
    st.header("üìÇ L·ªçc Danh M·ª•c Th·∫ßu")
    df3_temp = df3_ref.copy()
    for col in ['Mi·ªÅn','V√πng','T·ªânh','B·ªánh vi·ªán/SYT']:
        opts = ['(T·∫•t c·∫£)'] + sorted(df3_temp[col].dropna().unique())
        sel = st.selectbox(f"Ch·ªçn {col}", opts, key=col)
        if sel != '(T·∫•t c·∫£)':
            df3_temp = df3_temp[df3_temp[col] == sel]

    uploaded = st.file_uploader(
        "T·∫£i l√™n file Danh M·ª•c M·ªùi Th·∫ßu (.xlsx)", type=['xlsx']
    )
    if uploaded:
        display_df, export_df = process_uploaded(uploaded, df3_temp)
        st.success(f"‚úÖ T·ªïng d√≤ng kh·ªõp: {len(display_df)}")

        # Hi·ªÉn th·ªã b·∫£ng g·ªëc (style gi·ªëng c≈©)
        display_ui = display_df.fillna('').astype(str)
        st.write(display_ui)

        # L∆∞u session ƒë·ªÉ d√πng ph√≠a sau
        st.session_state['filtered_display'] = display_df.copy()
        st.session_state['filtered_export']  = export_df.copy()
        st.session_state['file3_temp']      = df3_temp.copy()

        # --- T√≠nh to√°n s·ªë li·ªáu ---
        df_calc = display_df.copy()
        df_calc.columns = df_calc.columns.str.strip()
        df_calc['S·ªë l∆∞·ª£ng']     = pd.to_numeric(
            df_calc.get('S·ªë l∆∞·ª£ng', 0), errors='coerce'
        ).fillna(0)
        df_calc['Gi√° k·∫ø ho·∫°ch'] = pd.to_numeric(
            df_calc.get('Gi√° k·∫ø ho·∫°ch', 0), errors='coerce'
        ).fillna(0)
        df_calc['Tr·ªã gi√°']      = df_calc['S·ªë l∆∞·ª£ng'] * df_calc['Gi√° k·∫ø ho·∫°ch']

        # H√†m format hi·ªÉn th·ªã
        def fmt(x):
            if x >= 1e9: return f"{x/1e9:.2f} t·ª∑"
            if x >= 1e6: return f"{x/1e6:.2f} tri·ªáu"
            if x >= 1e3: return f"{x/1e3:.2f} ngh√¨n"
            return str(int(x))

        # T·ªïng Tr·ªã gi√° theo Ho·∫°t ch·∫•t
        if 'T√™n ho·∫°t ch·∫•t' in df_calc.columns:
            val = (
                df_calc
                .groupby('T√™n ho·∫°t ch·∫•t')['Tr·ªã gi√°']
                .sum()
                .reset_index()
                .sort_values('Tr·ªã gi√°', ascending=False)
            )
            val['Tr·ªã gi√°'] = val['Tr·ªã gi√°'].apply(fmt)
            st.subheader('T·ªïng Tr·ªã gi√° theo Ho·∫°t ch·∫•t')
            st.table(val)

            # N√∫t download k·∫øt qu·∫£
            excel_data = to_excel_bytes(val)
            st.download_button(
                label="üì• T·∫£i k·∫øt qu·∫£ t·ªïng Tr·ªã gi√° (.xlsx)",
                data=excel_data,
                file_name="tong_tri_gia_theo_hoatchat.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'T√™n ho·∫°t ch·∫•t'.")

# 2. Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu
elif option == "Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu":
    st.header("üìä Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu")
    if 'filtered_export' in st.session_state:
        df_exp = st.session_state['filtered_export']
        file3_temp = st.session_state['file3_temp']
        summary = (
            df_exp
            .groupby(['B·ªánh vi·ªán/SYT','T√™n ho·∫°t ch·∫•t'])
            .agg(
                SL=('S·ªë l∆∞·ª£ng','sum'),
                TG=('Tr·ªã gi√°','sum')
            )
            .reset_index()
        )
        st.subheader("T·ªïng SL & Tr·ªã gi√° theo BV/SYT ‚Äì Ho·∫°t ch·∫•t")
        st.dataframe(summary)

        excel_data = to_excel_bytes(summary)
        st.download_button(
            label="üì• T·∫£i k·∫øt qu·∫£ ph√¢n t√≠ch (.xlsx)",
            data=excel_data,
            file_name="phan_tich_danh_muc_thau.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.warning("‚ö†Ô∏è B·∫°n ph·∫£i ch·∫°y ‚ÄúL·ªçc Danh M·ª•c Th·∫ßu‚Äù tr∆∞·ªõc.")

# 3. Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu
elif option == "Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu":
    st.header("üîç Ph√¢n T√≠ch Danh M·ª•c Tr√∫ng Th·∫ßu")
    st.info("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c x√¢y d·ª±ng..."

# 4. ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai
elif option == "ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai":
    st.header("üí° ƒê·ªÅ Xu·∫•t H∆∞·ªõng Tri·ªÉn Khai")
    if 'filtered_export' not in st.session_state or 'file3_temp' not in st.session_state:
        st.info("Vui l√≤ng th·ª±c hi·ªán 'L·ªçc Danh M·ª•c Th·∫ßu' tr∆∞·ªõc.")
    else:
        df_f = st.session_state['filtered_export']
        df3t = st.session_state['file3_temp']
        df3t = df3t[~df3t['ƒê·ªãa b√†n'].str.contains('T·∫°m ng∆∞ng tri·ªÉn khai|ko c√≥ ƒë·ªãa b√†n', case=False, na=False)]
        qty = df_f.groupby('T√™n s·∫£n ph·∫©m')['S·ªë l∆∞·ª£ng'].sum().rename('SL_tr√∫ng').reset_index()
        sug = pd.merge(df3t, qty, on='T√™n s·∫£n ph·∫©m', how='left').fillna({'SL_tr√∫ng':0})
        sug = pd.merge(sug, file4[['T√™n ho·∫°t ch·∫•t','Nh√≥m ƒëi·ªÅu tr·ªã']], on='T√™n ho·∫°t ch·∫•t', how='left')
        sug['S·ªë l∆∞·ª£ng ƒë·ªÅ xu·∫•t'] = (sug['SL_tr√∫ng']*1.5).apply(np.ceil).astype(int)
        sug['L√Ω do'] = sug.apply(lambda r: f"Nh√≥m {r['Nh√≥m ƒëi·ªÅu tr·ªã']} th∆∞·ªùng s·ª≠ d·ª•ng; s·∫£n ph·∫©m m·ªõi, hi·ªáu qu·∫£ t·ªët h∆°n.", axis=1)
        # display with fallback
        try:
            st.dataframe(sug)
        except ValueError:
            st.table(sug)
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine='xlsxwriter') as w:
            sug.to_excel(w, index=False, sheet_name='ƒê·ªÅ Xu·∫•t')
        st.download_button('‚¨áÔ∏è T·∫£i ƒê·ªÅ Xu·∫•t', data=buf.getvalue(), file_name='DeXuat.xlsx')
